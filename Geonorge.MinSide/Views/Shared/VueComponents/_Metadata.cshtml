<script type="text/x-template" id="metadata-template">
    <div>
        <div v-if="items && filteredItems.length" class="list">
            <h3 class="section-title">Metadata ({{items.NumFound}})</h3>
            <div class="list-header d-none d-md-block">
                <div class="row">
                    <div class="col-md-6">
                        Tittel
                    </div>
                    <div class="col-md-2">
                        Type
                    </div>
                    <div class="col-md-3">
                        Sist oppdatert
                    </div>
                </div>
            </div>
            <div class="list-content">
                <div v-for="item in filteredItems" class="list-item">
                    <div class="row">
                        <div class="col-md-6">
                            <a v-bind:href="item.ShowDetailsUrl" v-bind:title="'Vis detaljer for ' + item.Title">{{item.Title}}</a>
                        </div>
                        <div class="col-md-2">
                            <span class="d-inline-block d-md-none">Type:</span>
                            {{ getTypeName(item.Type) }}
                        </div>
                        <div class="col-md-3">
                            <span class="d-inline-block d-md-none">Sist oppdatert:</span>
                            {{ formatDate(item.Date) }}
                        </div>
                        <div class="col-md-1">
                            <a v-bind:href="getEditLink(item)" class="d-none d-md-block fa fa-edit icon-button float-right"></a>
                            <a v-bind:href="getEditLink(item)" class="d-block d-md-none btn float-right">Rediger <span class="fa fa-edit"></span></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="text-center">
                <button v-show="moreItemsAvailable" v-on:click="getItems()" class="fa fa-plus icon-button add-more-button"></button>
            </div>
        </div>
    </div>
</script>

<script>
    var Metadata = {
        name: "Metadata",
        template: "#metadata-template",
        props: ['loadAllApiData'],
        data: function () {
            return {
                items: null,
                numberOfVisibleItems: 0,
                filterProperties: [
                    'Title',
                ],
                typeNames: {
                    dataset: {
                        en: "Dataset",
                        no: "Datasett"
                    },
                    service: {
                        en: "Service",
                        no: "Tjeneste"
                    },
                    servicelayer: {
                        en: "Service layer",
                        no: "Tjenestelag"
                    },
                    software: {
                        en: "Software",
                        no: "Applikasjon"
                    },
                    dimensionGroup: {
                        en: "Dimension group",
                        no: "Datapakke"
                    }
                }
            }
        },
        computed: {
            moreItemsAvailable: function () {
                if (this.loadAllApiData) {
                    return false;
                } else {
                    return this.items && this.items.NumFound > this.numberOfVisibleItems;
                }
            },
            filteredItems: function () {
                var filteredItems = [];
                if (this.loadAllApiData && this.$root.searchInput) {
                    this.items.Results.forEach(function (item) {
                        var itemHasMatch = false;
                        this.filterProperties.forEach(function (filterProperty) {
                            if (item[filterProperty].toUpperCase().indexOf(this.$root.searchInput.toUpperCase()) > -1) {
                                itemHasMatch = true;
                            }
                        }.bind(this));
                        if (itemHasMatch) {
                            filteredItems.push(item);
                        }
                    }.bind(this))
                } else {
                    filteredItems = this.items.Results;
                }
                return filteredItems;
            }
        },
        methods: {
            getItems: function () {
                var itemsPerRequest = 10;
                var offsetParameter = this.numberOfVisibleItems ? "&offset=" + this.numberOfVisibleItems : "";
                var organizationNameParameter = '?facets%5b0%5dname=organization&facets%5b0%5dvalue=' + this.$root.OrganizationName;
                var orderParameter = "&orderby=updated";
                var environmentParameter = this.$root.Environment;

                if (this.loadAllApiData && this.items) {
                    itemsPerRequest = this.items.NumFound;
                }
                var apiURL = this.loadAllApiData
                    ? "https://kartkatalog." + environmentParameter + "geonorge.no/api/search" + organizationNameParameter + "&limit=" + itemsPerRequest + orderParameter
                    : "https://kartkatalog." + environmentParameter + "geonorge.no/api/search" + organizationNameParameter + "&limit=" + itemsPerRequest + orderParameter + offsetParameter

                Promise.resolve(this.$root.getApiData(apiURL))
                    .then((apiData) => {
                        if (!this.items || this.loadAllApiData) {
                            this.items = apiData;
                        }
                        else {
                            this.items.Results = this.items.Results.concat(apiData.Results);
                        }
                        this.numberOfVisibleItems += itemsPerRequest;
                    });
            },
            formatDate: function (date) {
                if (date) {
                    return moment(date).format('DD.MM.YYYY');
                }
            },
            getTypeName: function (type) {
                var activeLanguage = this.$root.activeLanguage;
                if (this.typeNames[type] && this.typeNames[type][activeLanguage]) {
                    return this.typeNames[type][activeLanguage];
                } else {
                    return type;
                }
            },
            getEditLink: function (item) {
                var environmentParameter = this.$root.Environment;
                var uuidParameter = "?uuid=" + item.Uuid;
                return "https://editor." + environmentParameter + "geonorge.no/Metadata/Edit" + uuidParameter;
            }
        },
        mounted: function () {
            this.getItems();
        },
        watch: {
            loadAllApiData: function () {
                this.getItems();
            }
        }
    };
</script>
